<?xml version="1.0" encoding="utf-8"?>
<supportClasses:PlanDiagramBase xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:controls="com.velti.monet.controls.*"
	xmlns:supportClasses="com.velti.monet.views.supportClasses.*"
	xmlns:models="com.velti.monet.models.*"
	xmlns:collections="com.velti.monet.collections.*"
	hasAngledConnections="{presentationModel.useAngeledConnections}"
	elementRenderer="{ElementRenderer}" 
	hasSwimLanes="{presentationModel.showSwimLanes}"
	pivotElements="{presentationModel.pivotElements}"
	pivotElement="{presentationModel.pivotElement}"
	tracePath="{presentationModel.tracePath}"
	interactionMode="{presentationModel.interactionMode}"
	updateComplete="captureThumbnail()">
	
	<mx:Script>
		<![CDATA[
			import com.velti.monet.controls.ElementRenderer;
			import com.velti.monet.models.DiagramScrollModel;
			import com.velti.monet.models.ElementType;
			import com.velti.monet.models.InteractionMode;
			import com.velti.monet.models.PresentationModel;
			
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.graphics.ImageSnapshot;
			
			/**
			 * A ref to the preso model bean
			 */
			[Bindable] [Inject]
			public var presentationModel:PresentationModel;
			
			/**
			 * The diagram scroll model.
			 */
			[Bindable] [Inject]
			public var diagramScrollModel:DiagramScrollModel;
			
			/**
			 * Captures the thumbnail bitmap of this canvas according to the
			 * the scroll model.  
			 */		
			protected function captureThumbnail():void {
				if( diagramScrollModel ){
					var matrix:Matrix = new Matrix();
					var scaleFactor:Number = this.width > this.height ? diagramScrollModel.minThumbnailWidth / this.width : diagramScrollModel.minThumbnailHeight / this.height;
					matrix.scale( scaleFactor, scaleFactor );
					diagramScrollModel.thumbnail.bitmapData = ImageSnapshot.captureBitmapData( this, matrix, null, null, null, true );
					diagramScrollModel.scaleFactorX = diagramScrollModel.thumbnail.bitmapData.width / this.width;
					diagramScrollModel.scaleFactorY = diagramScrollModel.thumbnail.bitmapData.height / this.height;
					diagramScrollModel.thumbnailWidth = diagramScrollModel.thumbnail.bitmapData.width;
					diagramScrollModel.thumbnailHeight = diagramScrollModel.thumbnail.bitmapData.height;
					diagramScrollModel.diagramWidth = this.width;
					diagramScrollModel.diagramHeight = this.height;
				}
			}
			
		]]>
	</mx:Script>

	<supportClasses:swimLanes>
		<mx:ArrayCollection>
			<models:SwimLane type="{ElementType.CAMPAIGN}"/>
			<models:SwimLane type="{ElementType.AUDIENCE}"/>
			<models:SwimLane type="{ElementType.PUBLISHER}"/>
			<models:SwimLane type="{ElementType.PLACEMENT}"/>
			<models:SwimLane type="{ElementType.ADVERTISEMENT}"/>
			<models:SwimLane type="{ElementType.INTERACTION}"/>
		</mx:ArrayCollection>
	</supportClasses:swimLanes>
	
</supportClasses:PlanDiagramBase>