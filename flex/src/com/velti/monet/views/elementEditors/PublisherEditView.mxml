<?xml version="1.0" encoding="utf-8"?>
<elementEditors:ElementEditorBase xmlns:elementEditors="com.velti.monet.views.elementEditors.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:views="com.velti.monet.views.*"
	title="Media Plan Step 4. Select Publishers and Placements">
	<mx:Text text="{dialogText}"/>
	<mx:Tree id="tree" width="100%" height="400" dataProvider="{publishersAndPlacements}"
		defaultLeafIcon="{null}" labelField="@label" showRoot="false" 
		itemRenderer="com.velti.monet.controls.itemRenderers.TreeCheckBoxItemRenderer"
		openItems="{publishersAndPlacements..node}" />
	<mx:Script>
	<![CDATA[
		import com.velti.monet.events.PlanEvent;
		import com.velti.monet.models.Element;
		import com.velti.monet.models.ElementTest;
		import com.velti.monet.models.ElementType;
		import com.velti.monet.models.Plan;
		import com.velti.monet.models.elementData.AudienceElementData;
		import com.velti.monet.models.elementData.PlacementElementData;
		import com.velti.monet.models.elementData.PublisherElementData;
		
		import mx.events.FlexEvent;
		
		/**
		 * A ref to the plan bean
		 */
		[Inject]
		public var plan:Plan;
		
		/**
		 * The text to use at the top of the dialog.
		 */
		[Bindable]
		public var dialogText:String = 
			"Select the pages where you want to place " +
			"your \ninteractions. The publishers are " +
			"ranked according to the \ntarget audience " +
			"characteristics you selected.";
		/**
		 * An XML representation of publishers and placements to choose from.
		 */
		[Bindable(event="elementChanged")]
		public function get publishersAndPlacements():XML {
			if(!element) return null;
			var returnVal:XML = new XML();
			var audience:Element = element.parents.getAt(0);
			if(audience) 
				returnVal = AudienceElementData(audience.data).publishersAndPlacements;
			return returnVal;
		}
		
		/**
		 * The element data 
		 */
		[Bindable(event="elementChanged")]
		public function get elementData():PublisherElementData {
			return element ? element.data as PublisherElementData : null;
		}
		
		/**
		 * @inheritDoc
		 */

		override protected function save():void {
			var editedNodes:XMLList = publishersAndPlacements..node.(attribute("wasEdited") == "1");
			
			for each(var xml:XML in editedNodes) {
				if(xml.@checked == "1") {
					//check to see if the audience element
					//already has the publisher
					/* var publisherNode:XML = xml.parent();
					var shouldAddPublisherNode:Boolean = publisherNode.attribute("elementID").length == 0;
					
					
					var audienceHasPublisher:XMLList = XMLList(publishersAndPlacements.(attribute("elementID") == publisher.elementID));
					//if not add the publisher node
					if(!audienceHasPublisher) {
						
					}
					xml.@elementID = this.element.elementID;
					publishersAndPlace ments.(attribute("elementID") == "1");
					*/
					//add the placement that was selected to 
					//the publisher node
					var audience:Element = element.parents.getAt(0);
					var pub:Element = this.element;
					var pubData:PublisherElementData = pub.data as PublisherElementData;
					var pubNode:XML = xml.parent();
					//if this publisher element is unset.. set it
					if(!pubData.node) {
						pubData.node = pubNode;
						var placement:Element = pub.descendents.getAt(0);
						var placementData:PlacementElementData = placement.data as PlacementElementData;
						placementData.node = xml;
					} else if (pubData.node == pubNode) { // add a new placement
						addNewPlacement(xml,pub);
					} else { // add a new publisher
						addNewPublisher(xml,audience);
					}
					
				} else { // remove the old node
					//find the node
					
					//remove the node
				}
				//remove edited attributes from the nodes
				delete xml.@wasEdited;
			}
			super.save();
		}
		
		private function addNewPublisher(xml:XML, audience:Element):void {					
			var pub:Element = new Element(ElementType.PUBLISHER);
			PublisherElementData(pub.data).node = xml.parent();
			var placement:Element = new Element(ElementType.PLACEMENT, xml.@label);
			PlacementElementData(placement.data).node = xml;
			pub.descendents.add(placement); 
			placement.parents.add(pub);
			
			this.dispatcher.dispatchEvent(new PlanEvent(PlanEvent.ADD_ELEMENT, pub, audience,null,false));
		}
		
		private function addNewPlacement(xml:XML, pub:Element):void {
			var placement:Element = new Element(ElementType.PLACEMENT);
			PlacementElementData(placement.data).node = xml;
			this.dispatcher.dispatchEvent(new PlanEvent(PlanEvent.ADD_ELEMENT, placement, pub,null,false));
		}
		
	]]>
	</mx:Script>
	
</elementEditors:ElementEditorBase>
